{"version":3,"sources":["Components/ImageInput.jsx","Components/CreateContact.jsx","Components/ListContacts.jsx","App.js","serviceWorker.js","index.js"],"names":["readFileAsDataURL","file","Promise","resolve","reader","FileReader","onload","event","target","result","readAsDataURL","resizeImage","imageURL","canvas","maxHeight","image","Image","context","getContext","height","width","clearRect","drawImage","toDataURL","src","ImageInput","state","value","handleFileChange","files","type","match","then","originalURL","_this","props","url","setState","handleFormReset","this","document","createElement","fileInput","form","addEventListener","removeEventListener","_this2","_this$props","className","name","style","position","backgroundImage","concat","backgroundRepeat","backgroundPosition","backgroundSize","react_default","a","ref","node","onChange","top","left","opacity","React","Component","CreateContact","handleSubmit","e","preventDefault","values","serializeForm","hash","firebase","push","console","log","react_router_dom","to","onSubmit","Components_ImageInput","maxheight","placeholder","ListContacts","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","gotData","data","dataitems","val","hasValue","objectSpread","entireData","gotErr","err","handleRemoveContact","handleQueryChange","query","trim","clearQuery","on","showingContacts","_this$state","RegExp","escapeRegExp","filter","contact","test","length","onClick","map","eachcontent","index","key","avatar","imgurl","email","phonenumber","App","react_router","path","exact","component","Boolean","window","location","hostname","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2f67af4c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst readFileAsDataURL = file =>\r\n  new Promise(resolve => {\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = event => {\r\n      resolve(event.target.result);\r\n    };\r\n\r\n    reader.readAsDataURL(file);\r\n  });\r\n\r\nconst resizeImage = (imageURL, canvas, maxHeight) =>\r\n  new Promise(resolve => {\r\n    const image = new Image();\r\n\r\n    image.onload = () => {\r\n      const context = canvas.getContext(\"2d\");\r\n\r\n      if (image.height > maxHeight) {\r\n        image.width *= maxHeight / image.height;\r\n        image.height = maxHeight;\r\n      }\r\n\r\n      context.clearRect(0, 0, canvas.width, canvas.height);\r\n      canvas.width = image.width;\r\n      canvas.height = image.height;\r\n\r\n      context.drawImage(image, 0, 0, image.width, image.height);\r\n\r\n      resolve(canvas.toDataURL(\"image/jpeg\"));\r\n    };\r\n\r\n    image.src = imageURL;\r\n  });\r\n\r\n/**\r\n * A custom <input> that dynamically reads and resizes image files before\r\n * submitting them to the server as data URLs. Also, shows a preview of the image.\r\n */\r\nclass ImageInput extends React.Component {\r\n  static propTypes = {\r\n    className: PropTypes.string,\r\n    name: PropTypes.string,\r\n    maxHeight: PropTypes.number\r\n  };\r\n\r\n  state = {\r\n    value: \"\"\r\n  };\r\n\r\n  handleFileChange = event => {\r\n    const file = event.target.files[0];\r\n\r\n    if (file && file.type.match(/^image\\//)) {\r\n      readFileAsDataURL(file).then(originalURL => {\r\n        resizeImage(originalURL, this.canvas, this.props.maxHeight).then(\r\n          url => {\r\n            this.setState({ value: url });\r\n          }\r\n        );\r\n      });\r\n    } else {\r\n      this.setState({ value: \"\" });\r\n    }\r\n  };\r\n\r\n  handleFormReset = () => {\r\n    this.setState({ value: \"\" });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.canvas = document.createElement(\"canvas\");\r\n    this.fileInput.form.addEventListener(\"reset\", this.handleFormReset);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.fileInput.form.removeEventListener(\"reset\", this.handleFormReset);\r\n  }\r\n\r\n  render() {\r\n    const { className, name } = this.props;\r\n    const { value } = this.state;\r\n\r\n    const style = {\r\n      position: \"relative\"\r\n    };\r\n\r\n    if (value) {\r\n      style.backgroundImage = `url(\"${value}\")`;\r\n      style.backgroundRepeat = \"no-repeat\";\r\n      style.backgroundPosition = \"center\";\r\n      style.backgroundSize = \"cover\";\r\n    }\r\n\r\n    return (\r\n      <div className={className} style={style}>\r\n        <input type=\"hidden\" name={name} value={value} />\r\n        <input\r\n          ref={node => (this.fileInput = node)}\r\n          type=\"file\"\r\n          onChange={this.handleFileChange}\r\n          style={{\r\n            position: \"absolute\",\r\n            top: 0,\r\n            left: 0,\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            opacity: 0\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImageInput;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ImageInput from \"./ImageInput\";\r\nimport serializeForm from \"form-serialize\";\r\nimport * as firebase from \"firebase\";\r\n\r\nclass CreateContact extends Component {\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const values = serializeForm(e.target, { hash: true });\r\n\r\n    firebase\r\n      .database()\r\n      .ref(\"ContactsList\")\r\n      .push(values)\r\n    console.log(values);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Link className=\"close-create-contact\" to=\"/\">\r\n          Close\r\n        </Link>\r\n        <form\r\n          onSubmit={e => {\r\n            this.handleSubmit(e);\r\n          }}\r\n          className=\"create-contact-form\"\r\n        >\r\n          <ImageInput\r\n            className=\"create-contact-avatar-input\"\r\n            name=\"avatar\"\r\n            maxheight={64}\r\n          />\r\n          <div className=\"create-contact-details\">\r\n            <input type=\"text\" name=\"name\" placeholder=\"Name\" />\r\n            <input type=\"email\" name=\"email\" placeholder=\"Email\" />\r\n            <input type=\"number\" name=\"age\" placeholder=\"Age\" />\r\n            <input\r\n              type=\"number\"\r\n              name=\"phonenumber\"\r\n              placeholder=\"Phone Number\"\r\n            />\r\n            <button>Create</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default CreateContact;\r\n","import React, { Component } from \"react\";\r\nimport * as firebase from \"firebase\";\r\nimport escapeRegExp from \"escape-string-regexp\";\r\nimport sortBy from \"sort-by\";\r\nimport { Link } from \"react-router-dom\";\r\nclass ListContacts extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      entireData: [],\r\n      query: \"\",\r\n      hasValue: 0\r\n    };\r\n  }\r\n  //To change the state after initial rendering\r\n  componentDidMount() {\r\n    const DB = firebase.database();\r\n    const contactlistdata = DB.ref(\"ContactsList\");\r\n    contactlistdata.on(\"value\", this.gotData, this.gotErr);\r\n    console.log(\"hello\");\r\n  }\r\n  // Callback Method called when retrieves the data from the database\r\n  gotData = data => {\r\n    let dataitems = data.val();\r\n    {\r\n      data.val() === null &&\r\n        this.setState({\r\n          hasValue: 0\r\n        });\r\n    }\r\n    // console.log(dataitems);\r\n    console.log(\"hey\");\r\n    {\r\n      data.val() !== null &&\r\n        this.setState({\r\n          ...this.state,\r\n          entireData: Object.values(Object.values(dataitems)),\r\n          hasValue: 1\r\n        });\r\n    }\r\n  };\r\n  // Callback method called when receives some error during the retrieval of data from the database\r\n  gotErr = err => {\r\n    console.log(err);\r\n  };\r\n  // Method handles the contact delete\r\n  handleRemoveContact = e => {\r\n    console.log(e.target);\r\n    console.log(\"I\");\r\n    // firebase\r\n    //   .database()\r\n    //   .ref(\"ContactsList/\" + e.key)\r\n    //   .remove();\r\n    // console.log(\"item removed\");\r\n  };\r\n  //Method to set the state of the query/search field\r\n  handleQueryChange = query => {\r\n    this.setState({\r\n      query: query.trim()\r\n    });\r\n  };\r\n  // Clears the query and shows the entire contact list\r\n  clearQuery = () => {\r\n    this.setState({\r\n      query: \"\"\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { query, entireData } = this.state;\r\n    let showingContacts;\r\n    if (query) {\r\n      const match = new RegExp(escapeRegExp(query), \"i\");\r\n      showingContacts = entireData.filter(contact => match.test(contact.name));\r\n    } else {\r\n      showingContacts = entireData;\r\n      console.log(showingContacts);\r\n    }\r\n    // showingContacts[1].sort(sortBy(\"name\"));\r\n    return (\r\n      <div className=\"list-contacts\">\r\n        <div className=\"list-contacts-top\">\r\n          <input\r\n            className=\"search-contacts\"\r\n            type=\"text\"\r\n            placeholder=\"search contact's here\"\r\n            value={query}\r\n            onChange={e => this.handleQueryChange(e.target.value)}\r\n          />\r\n          <Link to=\"/create\" className=\"add-contact\">\r\n            Add Contact\r\n          </Link>\r\n        </div>\r\n        {this.state.hasValue === 1 && (\r\n          <div>\r\n            {showingContacts.length !== entireData.length && (\r\n              <div className=\"showing-contacts\">\r\n                <span>\r\n                  Now showing {showingContacts.length} out of{\" \"}\r\n                  {entireData.length}\r\n                </span>\r\n                <button onClick={this.clearQuery}>Show all</button>\r\n              </div>\r\n            )}\r\n            <ul className=\"contact-list\">\r\n              {showingContacts.map((eachcontent, index) => (\r\n                <li key={index} className=\"contact-list-item\">\r\n                  <div\r\n                    className=\"contact-avatar\"\r\n                    style={{\r\n                      backgroundImage: `url(${eachcontent.avatar})`\r\n                    }}\r\n                  />\r\n                  {console.log(eachcontent.imgurl)}\r\n                  <div className=\"contact-details\">\r\n                    <p>\r\n                      <strong>{eachcontent.name}</strong>\r\n                    </p>\r\n                    <p>{eachcontent.email}</p>\r\n                    <p>{eachcontent.phonenumber}</p>\r\n                  </div>\r\n                  <button\r\n                    className=\"contact-remove\"\r\n                    onClick={e => this.handleRemoveContact(e)}\r\n                  >\r\n                    Remove\r\n                  </button>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        )}\r\n        {this.state.hasValue === 0 && (\r\n          <div className=\"contact-details contact-list\">\r\n            <p>\r\n              <center>No Contacts Available</center>\r\n            </p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default ListContacts;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport CreateContact from \"./Components/CreateContact\";\nimport ListContacts from \"./Components/ListContacts\";\nimport { Route } from \"react-router-dom\";\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <Route path=\"/\" exact component={ListContacts} />\n        <Route path=\"/create\" exact component={CreateContact} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport * as firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBOvoI3-Ae7HzdpfX-7kwOQ5bxpHpGRbu8\",\n  authDomain: \"contactsapp01.firebaseapp.com\",\n  databaseURL: \"https://contactsapp01.firebaseio.com\",\n  projectId: \"contactsapp01\",\n  storageBucket: \"\",\n  messagingSenderId: \"937998071410\",\n  appId: \"1:937998071410:web:c1efdd29b6ca599a\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}